{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"collapsed_sections":["oSYL9m8WAulW","8W3mV70AAOKt","TA3RKLdiAyQe"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard","accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["test"],"metadata":{"id":"JmzVb_fKDiNG"}},{"cell_type":"markdown","metadata":{"id":"PWvnEzuUiCT_"},"source":["# Adaboost реализация с нуля"]},{"cell_type":"markdown","metadata":{"id":"vEo7h-YNiPMV"},"source":["![](https://thumbs.gfycat.com/GratefulFlakyKakarikis-size_restricted.gif)\n","\n","src: https://gfycat.com/ru/gratefulflakykakarikis"]},{"cell_type":"markdown","metadata":{"id":"w6Ydls5lkvwL"},"source":["## Ошибка"]},{"cell_type":"markdown","metadata":{"id":"qdjXIBV9hzm2"},"source":["Классификация:\n","\n","$$E = - \\sum_{i=1}^{n}w_i \\sum_{k=1}^{K}y_i^k ln y(x_i, W)$$\n","\n","Регрессия:\n","\n","$$ E = \\frac{1}{2} \\sum_{i=1}^N w_i(y_i - y(x_i, W))^2$$"]},{"cell_type":"markdown","metadata":{"id":"nKiaN-wOmuLw"},"source":["Рассмотрим пример бинарной классификации на 2 класса $y_i = {1, -1}$. Тогда финальный прогноз М слабых классификаторов будет иметь вид:\n","$$Y(x) = sign (\\sum_{j=1}^M \\alpha_i y_j(x))$$\n","\n","где\n","1. $sign$ возвращает 1, если аргумент положителен, и -1 в обратном случае\n","2. $\\alpha_j$ - вес классификатора. Ответ классификаторов с отрицательным весом инвертируется.\n","3. $y_j(x)$ - прогноз алгоритма i (из М штук) на примере j (из n штук).\n","\n","От голосования в случайном лесе отличается наличиев веса алгоритма $\\alpha_j$."]},{"cell_type":"markdown","metadata":{"id":"O7UgYgGEk3-6"},"source":["## Один слабый классификатор\n","\n","Ошибка для одного классификатора:\n","* $\\epsilon_0 = \\frac{num errors}{n}$\n","* $\\epsilon_j = \\sum_{missclaass} w_i$ или другими словами $\\epsilon_j = \\sum_i^n w_i^j I(y_j(x_i) \\neq y_i)$, где $I(y_j(x_i) \\neq y_i)$ - индикаторная функция, возвращающая 1 при ошибке классификации и 0 в обратном.\n","\n","Если ошибка $0.5 \\leq \\epsilon_j$, то меняем прогноз на противоположный и $\\epsilon_j = 1 - \\epsilon_j$\n","\n","---\n","\n","Инициализация весов примеров:\n","* $w_0 = \\frac{1}{n}$ для всех точек $i$\n","* $w_i^{j+1} = \\frac{w_i^j exp(-\\alpha_j I(y_j(x_i) \\neq y_i))}{\\sum_{i=1}^n w_i^{j+i}}$\n","\n","---\n","\n","Инициализация веса алгоритма:\n","$\\alpha_j = ln\\frac{1 - \\epsilon_j}{\\epsilon_j + 1e-5}$\n","\n","1e-5 чтобы не поделить на ноль в случае нуля ошибок\n","\n"]},{"cell_type":"markdown","metadata":{"id":"rmaexRSExiMz"},"source":["Весь алгоритм выглядит так:\n","* Инициализировать веса $w_0$\n","\n","Итерироваться $M$ раз (обучить $M$ слабых классификаторов):\n","\n","1. Обучаем слабый классификатор y на взвешенной выборке\n","2. Вычисляем ошибку слабого классификатора \n","3. Вычисляем вес слабого классификатора \n","4. Обновляем веса $w$ элементов обучающей выборки"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"ElPj_AsPh0ET","outputId":"d7b8678e-3a19-41b2-ff0a-d103c09e2431"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","font = {'fontsize':20}\n","\n","alpha = lambda x: np.log((1-x)/(x+1e-5))\n","\n","error = np.arange(0.01, 1, 0.01)\n","plt.figure(figsize=(10, 8))\n","plt.title('Зависимость ошибки алгоритма от веса алгоритма', fontdict=font)\n","plt.xlabel('Epsilon j (Ошибка слабого классификатора)', fontdict=font)\n","plt.ylabel('Alpha j (Вес алгоритма)', fontdict=font)\n","plt.plot(error, alpha(error))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f7175a9b3d0>]"]},"metadata":{},"execution_count":1},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"qrZQ3H_yaCc9"},"source":["## Реализация алгоритма"]},{"cell_type":"code","metadata":{"id":"BK5KmcsQwP5H"},"source":["# based on https://github.com/python-engineer/MLfromscratch/blob/master/mlfromscratch/adaboost.py\n","\n","# решающий пень\n","class DecisionStump:\n","    # конструктор значений по умолчанию\n","    def __init__(self):\n","        self.polarity = 1 # +1 или -1 для заданного порога\n","        self.feature_idx = None # выбранный индекс\n","        self.threshold = None # пороговое значение\n","        self.alpha = None # качество алгоритма\n","    \n","    # X: np.array - обучающая выборка\n","    def predict(self, X):\n","        n_samples = X.shape[0] # количество элементов\n","        X_column = X[:, self.feature_idx] # выбранный на train признак, по которому энтропия самая большая\n","        preds = np.ones(n_samples) # для всех ответ 1\n","        if self.polarity == 1: # по умолчанию\n","            preds[X_column < self.threshold] = -1 # если меньше порога то -1\n","        else:\n","            preds[X_column > self.threshold] = -1 # если выше порога то -1\n","        return preds\n","\n","# адабуст на пнях\n","class Adaboost:\n","    # конструктор значений по умолчанию\n","    # n_clf: int количество классификаторов\n","    def __init__(self, n_clf = 5):\n","        self.n_clf = n_clf\n","        self.clfs = []\n","\n","    # функция обучения\n","    # X: np.array - обучающая выборка\n","    # y: np.array - вектор ответов \n","    def fit(self, X, y):\n","        n_samples, n_features = X.shape # количество примеров и признаков\n","        \n","        # инициализация весов\n","        w = np.full(n_samples, (1/n_samples))\n","\n","        # проходимся по всем классификаторам\n","        self.clfs = []\n","        for _ in range(self.n_clf):\n","            clf = DecisionStump() # инициализируем слабый классификатор\n","            \n","            min_error = float('inf') # лучший результат по перебору всех порогов\n","            for feature_i in range(n_features):\n","                X_column = X[:, feature_i] # для признака i\n","                thresholds = np.unique(X_column) # все пороги\n","                for threshold in thresholds: # проходимся по всем порогам\n","                    p = 1 # +1 по умолчанию\n","                    predictions = np.ones(n_samples) # все прогнозы единицы\n","                    predictions[X_column < threshold] = -1 # если ниже порога - левый лист\n","\n","                    missclassified = w[y != predictions] # количество ошибок\n","                    error = sum(missclassified) # суммарная ошибка\n","                    \n","                    if error > 0.5: # если больше 0.5 - меняем прогноз на обратный\n","                        error = 1 - error \n","                        p = -1\n","                \n","                    if error < min_error: # меняем порог, если нашли результат лучше\n","                        clf.polarity = p # +1/-1\n","                        clf.threshold = threshold # лучший порог\n","                        clf.feature_idx = feature_i # выбранный признак\n","                        min_error = error # лучшая ошибка\n","\n","            clf.alpha = np.log((1-min_error+1e-5) / (min_error + 1e-5)) # вес алгоритма в зависимости от ошибки\n","            preds = clf.predict(X) # предсказания алгоритмов\n","            w *= np.exp(-clf.alpha * predictions) # веса примеров\n","            w /= np.sum(w) # нормировка ошибки\n","\n","            self.clfs.append(clf) # добавляем классификатор\n","\n","    def predict(self, X):\n","        clf_preds = [clf.alpha * clf.predict(X) for clf in self.clfs] # умножаем вес алгоритма на его прогноз для всех классификаторов\n","        y_pred = np.sum(clf_preds, axis=0) # суммируем\n","        y_pred = np.sign(y_pred) # возвращаем +1 если положительно, -1 в обратном\n","        return y_pred"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZXc6JTSKaFmB"},"source":["## Сравнение реализации с коробочным"]},{"cell_type":"code","metadata":{"id":"yalTC3Ch3fxf"},"source":["from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","\n","data = datasets.load_breast_cancer() # стандартный датасет для рака груди\n","X = data.data # признаковое описание\n","y = data.target # ответы\n","\n","y[y==0] = -1 # алгоритм требует разметки +- 1\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-ClOcVyH7kWu"},"source":["clf = Adaboost(n_clf=50) # проверим для 50 пней\n","clf.fit(X_train, y_train)\n","y_pred = clf.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lAMYwgo87rft","outputId":"898e1476-91ef-439b-f159-0354a90dbe14"},"source":["from sklearn.metrics import classification_report\n","# метрики качества\n","print(classification_report(y_test, y_pred, target_names=data.target_names))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","   malignant       0.78      0.95      0.86        41\n","      benign       0.97      0.85      0.91        73\n","\n","    accuracy                           0.89       114\n","   macro avg       0.87      0.90      0.88       114\n","weighted avg       0.90      0.89      0.89       114\n","\n"]}]},{"cell_type":"code","metadata":{"id":"d5UC0hPlWLNx"},"source":["# сравним с коробочным решением\n","from sklearn.ensemble import AdaBoostClassifier\n","\n","clf_sklearn = AdaBoostClassifier(n_estimators=50) # If None, then the base estimator is DecisionTreeClassifier initialized with max_depth=1.\n","clf_sklearn.fit(X_train, y_train)\n","y_pred_sklearn = clf_sklearn.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Cn8Yn58ZDxu","outputId":"7b2963c9-7851-44f9-b129-fdf2e3425e02"},"source":["from sklearn.metrics import classification_report\n","# метрики качества\n","print(classification_report(y_test, y_pred_sklearn, target_names=data.target_names))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","   malignant       1.00      0.98      0.99        46\n","      benign       0.99      1.00      0.99        68\n","\n","    accuracy                           0.99       114\n","   macro avg       0.99      0.99      0.99       114\n","weighted avg       0.99      0.99      0.99       114\n","\n"]}]}]}